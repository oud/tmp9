package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class PmEntrepriseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPmEntrepriseAllPropertiesEquals(PmEntreprise expected, PmEntreprise actual) {
        assertPmEntrepriseAutoGeneratedPropertiesEquals(expected, actual);
        assertPmEntrepriseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPmEntrepriseAllUpdatablePropertiesEquals(PmEntreprise expected, PmEntreprise actual) {
        assertPmEntrepriseUpdatableFieldsEquals(expected, actual);
        assertPmEntrepriseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPmEntrepriseAutoGeneratedPropertiesEquals(PmEntreprise expected, PmEntreprise actual) {
        assertThat(actual)
            .as("Verify PmEntreprise auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPmEntrepriseUpdatableFieldsEquals(PmEntreprise expected, PmEntreprise actual) {
        assertThat(actual)
            .as("Verify PmEntreprise relevant properties")
            .satisfies(a -> assertThat(a.getIdEntrepriseRPG()).as("check idEntrepriseRPG").isEqualTo(expected.getIdEntrepriseRPG()))
            .satisfies(a ->
                assertThat(a.getCodePartenaireDistributeur())
                    .as("check codePartenaireDistributeur")
                    .isEqualTo(expected.getCodePartenaireDistributeur())
            )
            .satisfies(a -> assertThat(a.getNumeroSiretSiege()).as("check numeroSiretSiege").isEqualTo(expected.getNumeroSiretSiege()))
            .satisfies(a -> assertThat(a.getCodeEtat()).as("check codeEtat").isEqualTo(expected.getCodeEtat()))
            .satisfies(a -> assertThat(a.getLibelleEtat()).as("check libelleEtat").isEqualTo(expected.getLibelleEtat()))
            .satisfies(a ->
                assertThat(a.getCodeCategoriePersonne()).as("check codeCategoriePersonne").isEqualTo(expected.getCodeCategoriePersonne())
            )
            .satisfies(a ->
                assertThat(a.getLibelleCategoriePersonne())
                    .as("check libelleCategoriePersonne")
                    .isEqualTo(expected.getLibelleCategoriePersonne())
            )
            .satisfies(a -> assertThat(a.getCodeType()).as("check codeType").isEqualTo(expected.getCodeType()))
            .satisfies(a ->
                assertThat(a.getDateCreationJuridique()).as("check dateCreationJuridique").isEqualTo(expected.getDateCreationJuridique())
            )
            .satisfies(a -> assertThat(a.getDateEtat()).as("check dateEtat").isEqualTo(expected.getDateEtat()))
            .satisfies(a ->
                assertThat(a.getDateFermetureJuridique()).as("check dateFermetureJuridique").isEqualTo(expected.getDateFermetureJuridique())
            )
            .satisfies(a ->
                assertThat(a.getCodeTrancheEffectif()).as("check codeTrancheEffectif").isEqualTo(expected.getCodeTrancheEffectif())
            )
            .satisfies(a ->
                assertThat(a.getLibelleTrancheEffectif()).as("check libelleTrancheEffectif").isEqualTo(expected.getLibelleTrancheEffectif())
            )
            .satisfies(a ->
                assertThat(a.getDateCessationActivite()).as("check dateCessationActivite").isEqualTo(expected.getDateCessationActivite())
            )
            .satisfies(a ->
                assertThat(a.getDateEffectifOfficiel()).as("check dateEffectifOfficiel").isEqualTo(expected.getDateEffectifOfficiel())
            )
            .satisfies(a -> assertThat(a.getEffectifOfficiel()).as("check effectifOfficiel").isEqualTo(expected.getEffectifOfficiel()))
            .satisfies(a ->
                assertThat(a.getCodeMotifCessationActivite())
                    .as("check codeMotifCessationActivite")
                    .isEqualTo(expected.getCodeMotifCessationActivite())
            )
            .satisfies(a -> assertThat(a.getSiren()).as("check siren").isEqualTo(expected.getSiren()))
            .satisfies(a -> assertThat(a.getCodeFormeJuridique()).as("check codeFormeJuridique").isEqualTo(expected.getCodeFormeJuridique())
            )
            .satisfies(a -> assertThat(a.getRaisonSociale()).as("check raisonSociale").isEqualTo(expected.getRaisonSociale()))
            .satisfies(a ->
                assertThat(a.getCodeCategorieJuridique()).as("check codeCategorieJuridique").isEqualTo(expected.getCodeCategorieJuridique())
            )
            .satisfies(a -> assertThat(a.getCodeIDCC()).as("check codeIDCC").isEqualTo(expected.getCodeIDCC()))
            .satisfies(a -> assertThat(a.getCodeAPE()).as("check codeAPE").isEqualTo(expected.getCodeAPE()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertPmEntrepriseUpdatableRelationshipsEquals(PmEntreprise expected, PmEntreprise actual) {
        assertThat(actual)
            .as("Verify PmEntreprise relationships")
            .satisfies(a -> assertThat(a.getAdresse()).as("check adresse").isEqualTo(expected.getAdresse()))
            .satisfies(a -> assertThat(a.getEmail()).as("check email").isEqualTo(expected.getEmail()))
            .satisfies(a -> assertThat(a.getTelephone()).as("check telephone").isEqualTo(expected.getTelephone()));
    }
}
