package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AdresseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdresseAllPropertiesEquals(Adresse expected, Adresse actual) {
        assertAdresseAutoGeneratedPropertiesEquals(expected, actual);
        assertAdresseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdresseAllUpdatablePropertiesEquals(Adresse expected, Adresse actual) {
        assertAdresseUpdatableFieldsEquals(expected, actual);
        assertAdresseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdresseAutoGeneratedPropertiesEquals(Adresse expected, Adresse actual) {
        assertThat(actual)
            .as("Verify Adresse auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdresseUpdatableFieldsEquals(Adresse expected, Adresse actual) {
        assertThat(actual)
            .as("Verify Adresse relevant properties")
            .satisfies(a -> assertThat(a.getCodePaysISO()).as("check codePaysISO").isEqualTo(expected.getCodePaysISO()))
            .satisfies(a -> assertThat(a.getCodePostal()).as("check codePostal").isEqualTo(expected.getCodePostal()))
            .satisfies(a ->
                assertThat(a.getDateDerniereModification())
                    .as("check dateDerniereModification")
                    .isEqualTo(expected.getDateDerniereModification())
            )
            .satisfies(a -> assertThat(a.getLibelleCommune()).as("check libelleCommune").isEqualTo(expected.getLibelleCommune()))
            .satisfies(a -> assertThat(a.getLigne1()).as("check ligne1").isEqualTo(expected.getLigne1()))
            .satisfies(a -> assertThat(a.getLigne2()).as("check ligne2").isEqualTo(expected.getLigne2()))
            .satisfies(a -> assertThat(a.getLigne3()).as("check ligne3").isEqualTo(expected.getLigne3()))
            .satisfies(a -> assertThat(a.getLigne4()).as("check ligne4").isEqualTo(expected.getLigne4()))
            .satisfies(a -> assertThat(a.getLigne5()).as("check ligne5").isEqualTo(expected.getLigne5()))
            .satisfies(a -> assertThat(a.getLigne6()).as("check ligne6").isEqualTo(expected.getLigne6()))
            .satisfies(a -> assertThat(a.getLigne7()).as("check ligne7").isEqualTo(expected.getLigne7()))
            .satisfies(a -> assertThat(a.getNombreCourriersPND()).as("check nombreCourriersPND").isEqualTo(expected.getNombreCourriersPND())
            )
            .satisfies(a -> assertThat(a.getCodeUsageAdresse()).as("check codeUsageAdresse").isEqualTo(expected.getCodeUsageAdresse()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAdresseUpdatableRelationshipsEquals(Adresse expected, Adresse actual) {
        // empty method
    }
}
